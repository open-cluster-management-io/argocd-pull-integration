name: ChartUpload

permissions:
  contents: read

on:
  release:
    types: [published]

env:
  CHART_NAME: argocd-agent-addon

jobs:
  env:
    name: prepare release env
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: get release version
        id: get_release_version
        run: |
          RELEASE_VERSION=${GITHUB_REF#refs/tags/}
          echo "::set-output name=RELEASE_VERSION::${RELEASE_VERSION}"
          echo "::set-output name=MAJOR_RELEASE_VERSION::${RELEASE_VERSION%.*}"
          echo "::set-output name=TRIMMED_RELEASE_VERSION::${RELEASE_VERSION#v}"
    outputs:
      RELEASE_VERSION: ${{ steps.get_release_version.outputs.RELEASE_VERSION }}
      MAJOR_RELEASE_VERSION: ${{ steps.get_release_version.outputs.MAJOR_RELEASE_VERSION }}
      TRIMMED_RELEASE_VERSION: ${{ steps.get_release_version.outputs.TRIMMED_RELEASE_VERSION }}
  upload:
    name: upload
    runs-on: ubuntu-latest
    needs: [ env ]
    permissions:
      contents: write
    steps:
      - name: submit charts to OCM chart repo
        if: github.event_name != 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.OCM_BOT_PAT }}
          script: |
            try {
              const result = await github.rest.actions.createWorkflowDispatch({
                owner:          'open-cluster-management-io',
                repo:           'helm-charts',
                workflow_id:    'download-chart.yml',
                ref: 'main',
                inputs: {
                  repo:         "${{ github.repository }}",
                  version:      "${{ needs.env.outputs.TRIMMED_RELEASE_VERSION }}",
                  "chart-name": "${{ env.CHART_NAME }}",
                },
              })
              console.log(result);
            } catch(error) {
              console.error(error);
              core.setFailed(error);
            }
