name: GoRelease

on:
  push:
    tags:
      - 'v*.*.*'
env:
  # Common versions
  GO_VERSION: '1.19'
  GO_REQUIRED_MIN_VERSION: ''
  GOPATH: '/home/runner/work/argocd-pull-integration/argocd-pull-integration/go'
  GITHUB_REF: ${{ github.ref }}
  CHART_NAME: 'argocd-pull-integration'

defaults:
  run:
    working-directory: go/src/github.com/open-cluster-management-io/argocd-pull-integration

jobs:
  env:
    if: github.repository == 'open-cluster-management-io/argocd-pull-integration'
    name: prepare release env
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          path: go/src/github.com/open-cluster-management-io/argocd-pull-integration
      - name: get release version
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      - name: get major release version
        run: |
          echo "MAJOR_RELEASE_VERSION=${RELEASE_VERSION%.*}" >> $GITHUB_ENV
          echo "TRIMED_RELEASE_VERSION=${RELEASE_VERSION#v}" >> $GITHUB_ENV
      - name: verify chart version
        run: |
          cat ./charts/argocd-pull-integration/Chart.yaml  | grep -q 'version: ${{ env.TRIMED_RELEASE_VERSION }}'
    outputs:
      MAJOR_RELEASE_VERSION: ${{ env.MAJOR_RELEASE_VERSION }}
      RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
      TRIMED_RELEASE_VERSION: ${{ env.TRIMED_RELEASE_VERSION }}
  release:
    if: github.repository == 'open-cluster-management-io/argocd-pull-integration'
    name: release
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          path: go/src/github.com/open-cluster-management-io/argocd-pull-integration
      - name: install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: install imagebuilder
        run: go install github.com/openshift/imagebuilder/cmd/imagebuilder@v1.2.3
      - name: images
        run:  make docker-build
      - name: get release version
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      - name: get major release version
        run: |
          echo "MAJOR_RELEASE_VERSION=${RELEASE_VERSION%.*}" >> $GITHUB_ENV
      - name: push image
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login quay.io --username ${{ secrets.DOCKER_USER }} --password-stdin
          docker tag quay.io/open-cluster-management/argocd-pull-integration:latest quay.io/open-cluster-management/argocd-pull-integration:$RELEASE_VERSION
          docker push quay.io/open-cluster-management/argocd-pull-integration:$RELEASE_VERSION
      - name: generate changelog
        run: |
          echo "# argocd-pull-integration $RELEASE_VERSION" > /home/runner/work/changelog.txt
          echo "- The released image is quay.io/open-cluster-management/argocd-pull-integration:$RELEASE_VERSION" >> /home/runner/work/changelog.txt
      - name: publish release
        uses: softprops/action-gh-release@v0.1.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body_path: /home/runner/work/changelog.txt
  helm:
    name: helm
    runs-on: ubuntu-latest
    needs: [ env, release ]
    steps:
      - name: checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          path: go/src/github.com/open-cluster-management-io/argocd-pull-integration
      - name: setup helm
        uses: azure/setup-helm@v1
      - name: chart package
        run: |
          mkdir -p release
          pushd release
          helm package ../charts/${{ env.CHART_NAME }}/
          popd
      - name: publish release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.RELEASE_VERSION }}
          artifacts: "go/src/github.com/open-cluster-management-io/argocd-pull-integration/release/*.tgz"
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: submit charts to OCM chart repo
        uses: actions/github-script@v6
        with:
          debug: ${{ secrets.ACTIONS_RUNNER_DEBUG }}
          github-token: ${{ secrets.OCM_BOT_PAT }}
          script: |
            try {
              const result = await github.rest.actions.createWorkflowDispatch({
                owner:          'open-cluster-management-io',
                repo:           'helm-charts',
                workflow_id:    'download-chart.yml',
                ref: 'main',
                inputs: {
                  repo:         "${{ github.repository }}",
                  version:      "${{ needs.env.outputs.TRIMED_RELEASE_VERSION }}",
                  "chart-name": "${{ env.CHART_NAME }}",
                },
              })
              console.log(result);
            } catch(error) {
              console.error(error);
              core.setFailed(error);
            }
